//////////////////////////////////
// Código de Redundacia Cíclica //
//////////////////////////////////

Prueba del ejercicio.
Compilar las clases.
Ejecutar primero la clase GeneraCRC32.
 - Se crea el archivo ZIP. Se calcula la suma de comprobación y se muestra.
 - Se ejecuta la clase VerificaCRC32 para descomprimir el archivo. Se muestra la suma de comprobación.
 - Los dos valores deben ser exactamente iguales, si no es así, el archivo esta corrupto.

Las sumas de verificacion se utilizan para validar datos.

Se puede puede crear un archivo ZIP y enviarlo a un cliente remoto, junto con el valor de la suma de comprobación.
Si el cliente remoto descomprime el archivo, compara el valor de la suma de comprobación.
Si los dos valores son iguales, se sabe que el archivo es auténtico.


import java.io.*;
import java.util.zip.*;
public class GeneraCRC32 {
    public GeneraCRC32(){
        final int BUFFER = 2048;
        try {
            BufferedInputStream bis = null;
            FileOutputStream fos = new FileOutputStream("c:\\Users\\escom\\Desktop\\prueba.zip");
            CheckedOutputStream chos = new CheckedOutputStream(fos, new Adler32());
            ZipOutputStream zos = new ZipOutputStream(new BufferedOutputStream(chos));
            byte dato[] = new byte[BUFFER];
            File f = new File(".");
            String s[] = f.list();
            for (int i=0; i<s.length; i++) {
                System.out.println("Agregando: " + s[i]);
                FileInputStream fis = new FileInputStream(s[i]);
                bis = new BufferedInputStream(fis, BUFFER);
                ZipEntry ze = new ZipEntry(s[i]);
                zos.putNextEntry(ze);
                int n;
                while((n = bis.read(dato, 0, BUFFER)) != -1) zos.write(dato, 0, n);
                bis.close();
            }
            zos.close();
            System.out.println("CRC: " + chos.getChecksum().getValue());
        } catch(Exception e) { e.printStackTrace(); }
    }
    public static void main (String [] args) {
        new GeneraCRC32();
    }    
}

import java.io.*;
import java.util.zip.*;
public class VerificaCRC32 {
    public VerificaCRC32(){
        try {
            final int BUFFER = 2048;
            BufferedOutputStream bos = null;
            FileInputStream fis = new FileInputStream("c:\\Users\\escom\\Desktop\\prueba.zip"); // ruta
            CheckedInputStream chis = new CheckedInputStream(fis, new Adler32());
            ZipInputStream zis = new ZipInputStream(new BufferedInputStream(chis));
            ZipEntry ze;
            while((ze = zis.getNextEntry()) != null) {
                System.out.println("Extracción: " + ze);
                int n;
                byte dato[] = new byte[BUFFER];
                FileOutputStream fos = new FileOutputStream(ze.getName());
                bos = new BufferedOutputStream(fos, BUFFER);
                while ((n = zis.read(dato, 0, BUFFER)) != -1) bos.write(dato, 0, n);
                bos.flush();
                bos.close();
            }
            zis.close();
            System.out.println("CRC: " + chis.getChecksum().getValue());
        } catch(Exception e) { e.printStackTrace(); }
    }
    public static void main (String [] args) {
        new VerificaCRC32();
    }    
}
